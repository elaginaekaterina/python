# Множества и словари


# Множества
s = set() # создание пустого множества
basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
print(basket) # одна копия эл-та {'orange', banana','pear', 'apple'}
'ogange' in basket # True
'python' in basket # False

# Операции с множествами
s.add(element) #добавление элемента
s.remove(element) #удаление эл-та, выдает ошибку при его отсутствии
s.discard(element) # удаление эл-та, НЕ выдает ошибку при отсутствии эл-та
s.clear() # удаление всех элементов множ-ва
len(s) # узнать число элементов мн-ва


#Перебор элементов множества
basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
for x in basket:
    print(x)

# Словари
# Словарь (dictionary), отображение (map),
# ассоциативный массив
# Позволяет хранить пары <ключ, значение>.
dict, {}
a = {'a': 239, 10: 100}
print(d['a'])
print(d[10])

# Опреции со словарями
dictionary = {...}
key in dictionary # True or False
key not in dictionary # True or False
dictionary[key] = value # добавление пары явно указав ключ и его значение
dictionary[key] # если нет такого ключа - ошибка
dictionary.get(key) # вернет значение кдюча, при его наличии, либо None, если его нет
del dictionary[key] # удаление эл-ов из словаря по ключу

Словари:
    1. Изменяемы
    2. Эл-ты не имеют порядка
    3. Все ключи различны
    4. Ключи не изменяемы

# Перебор эл-ов словаря
d = {'C': 14, 'A': 12, 'T': 9, 'G': 18}
for key in d:
    print(key, end = ' ') #G C A T
for key in d.keys():
    print(key, end = ' ') #G C A T
for value in d.values():
    print(value, end = ' ') # 18 14 12 9
for key, value in d.items(): # items - перебор всех пар ключ-значение
    print(key, value, end = ';') # G 18; C 14; A 12; T 9;

Напишите функцию update_dictionary(d, key, value),
которая принимает на вход словарь d и два числа: key и value.

Если ключ key есть в словаре d, то добавьте значение value в список,
который хранится по этому ключу.
Если ключа key нет в словаре, то нужно добавить значение в список по ключу
2∗key. Если и ключа 2∗key нет, то нужно добавить ключ
2∗key в словарь и сопоставить ему список из переданного элемента [value].

Требуется реализовать только эту функцию, кода вне её не должно быть.
Функция не должна вызывать внутри себя функции input и print. '''

 def update_dictionary(d, key, value):
    if key in d:
        d[key].append(value)
       #print('ключ есть')
    elif key is not d:
        #d[2*key] = []
        if 2*key is d:
            d[2*key].append(value)
            #print('ключ 2*key уже есть')
        elif (2*key is not d) and d.get(2*key) == None:
            d[2*key] = []
            d[2*key].append(value)
            #print('создание ключа и + новое значение списка')
        elif (2*key is not d) and d.get(2*key)!=None:
            d[2*key].append(value)
            #print('создание ключа и + значение списка')       
    return


'''

Когда Антон прочитал «Войну и мир»,
ему стало интересно, сколько слов и в каком количестве используется в этой книге.

Помогите Антону написать упрощённую версию такой программы,
которая сможет подсчитать слова, разделённые пробелом и вывести получившуюся статистику.

Программа должна считывать одну строку со стандартного ввода и выводить
для каждого уникального слова в этой строке число его повторений
(без учёта регистра) в формате "слово количество" (см. пример вывода).
Порядок вывода слов может быть произвольным, каждое уникальное слово﻿
должно выводиться только один раз. '''


n='' #инициализация строки
n = str(input())
m = [] #инициализация списка
m.append([str(s.lower()) for s in n.split()]) 
d = {} #инициализация пустого словаря
li, lj = len(m), len(m[0])
for i in range(li):
    for j in range(lj):
        p = m[i][j]
        if p in d:
            d[p] += 1
        else:
            d[p] = 1
for key,value in d.items():
   print(key,value)

'''
Напишите программу, которая считывает строку с числом n,
которое задаёт количество чисел, которые нужно считать. Далее считывает nn строк с числами xi,
по одному числу в каждой строке. Итого будет n+1 строк.

При считывании числа xi программа должна на отдельной строке вывести значение f(xi).
Функция f(x) уже реализована и доступна для вызова. 

Функция вычисляется достаточно долго и зависит только от переданного аргумента x.
Для того, чтобы уложиться в ограничение по времени, нужно избежать повторного вычисления значений.'''

dict={}
n=int(input())
for i in range(n):
    x=int(input())
    if x in dict:
        print(dict[x])
    else:
        dict[x]=f(x)
        print(dict[x])
